#!/usr/bin/perl
$| = 1;
use strict;

my $base = $ENV{BDBASE};
chdir $base or die "bindist base \"$base\" is bogus, set env var BDBASE\n";

use File::Find;

sub perdir {
  my $dir = shift;
  my ($old, $new, $level, $fn);

  return unless $dir;

  $level = scalar(split(/\//, $dir));
  $fn = "$dir/index.php";

  $new = "<?\n\$level = $level;\n";
  if ($level == 1) {
      $new = $new . "\$excluded = array(\"current\", \"release\",\"README\");\n";
  }
  $new = $new . "\$symlinked = 0;\n";
  $new = $new . "\$parts = split(\"/\", \$_SERVER[\'SCRIPT_NAME\']);\n";
  $new = $new . "if (\$parts[4] == \"release\" || \$parts[4] == \"current\") {\n";
  $new = $new . "  \$level++;\n  \$symlinked = 1;\n}\n";
  $new = $new . "include \"".("../"x$level)."index.php\";\n?>";

  if (-f $fn) {
    $old = "";
    open(IN, $fn);
    $old .= $_ while <IN>;
    close(IN);
    if ($old eq $new) {
      return;
    }
  }

  print "Writing $fn\n";
  open(OUT, ">$fn") or die "can't write \"$fn\": $!";
  print OUT $new;
  close(OUT) or die "can't write \"$fn\": $!";
}


my (@dirlist, $dir);
@dirlist = ();

find(sub {
       if (! /^\./ && -d) {
	 if ($File::Find::name =~ /^\.\/(.+)$/) {
	   push @dirlist, $1;
	 }
       }
     }, ".");

foreach $dir (@dirlist) {
  &perdir($dir);
}

exit 0;
